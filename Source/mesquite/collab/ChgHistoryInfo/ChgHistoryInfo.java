/* Mesquite source code.  Copyright 1997-2009 W. Maddison and D. Maddison. Version 2.7, August 2009.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.collab.ChgHistoryInfo; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/** ======================================================================== */public class ChgHistoryInfo extends DataWindowAssistantI {	CharacterData data;	MesquiteTable matrixTable;	HTMLSidePanel panel;//	DWTable table;	MesquiteBoolean showPanel;	NameReference historyNameRef = NameReference.getNameReference("ChangeHistory");	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		showPanel = new MesquiteBoolean(false);		addCheckMenuItem(null, "Show History Panel", makeCommand("togglePanel", this), showPanel);		return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	temp.addLine("togglePanel " + showPanel.toOffOnString());  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether or not the history panel is shown", "[on = shown; off]", commandName, "togglePanel")) {    	 		showPanel.toggleValue(parser.getFirstToken(arguments));			setPanel();    	 	}    	 	else    	 		return  super.doCommand(commandName, arguments, checker);		return null;   	 }	/*.................................................................................................................*/	public void panelGoAway(Panel p){		showPanel.setValue(false);		setPanel();	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }   	 public void viewChanged(){   	 }   	 	public void setTableAndData(MesquiteTable table, CharacterData data){		this.matrixTable = table;		this.data = data;				setPanel();	}	void setPanel(){		MesquiteWindow f = containerOfModule();		if (f instanceof TableWindow){			if (showPanel.getValue()){				if (panel == null)					panel = new HTMLSidePanel(this, "History of Changes");				((TableWindow)f).addSidePanel(panel, HTMLSidePanel.width);			//	table = panel.getTable();			}			else {				if (panel != null)					((TableWindow)f).removeSidePanel(panel);			}		}			}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	/*.................................................................................................................*/   	public void focusInCell(int ic, int it){   		if (data == null || panel == null)   			return;   				if (ic < 0 || it< 0){			panel.setText("<html><p></html>");			return;		}		ChangeHistory cH = (ChangeHistory)data.getCellObject(historyNameRef, ic, it);		String text = "<html>";		String s ="";		if (cH != null)			for (int i = 0; i<cH.getNumEvents(); i++){				ChangeEvent e = cH.getEvent(i);				s += "<li>to " + e.getChange();  //what changed to				//by whom				Author a = e.getAuthor();				if (a != null)					s += " <strong>(" + a.getName() + ")</strong>";				//when				GregorianCalendar c = new GregorianCalendar();				c.setTime(new Date(e.getTime()));				s += "  " + c.get(Calendar.YEAR) + "." + (c.get(Calendar.MONTH)+1)  + "." + c.get(Calendar.DAY_OF_MONTH) ;				s += "</li>";			}		if (StringUtil.blank(s))			text += "<h3>No History Recorded for Cell</h3>";		else			text += "<h3>Recorded history for character " + (ic+1) + " in taxon " + (it+1) + "</h3><ul>" + s + "</ul>";		text += "</html>";		panel.setText(text);   	}	/*.................................................................................................................*/    	 public String getName() {		return "Change History Info";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Installs a panel with information about history of changes of a character matrix.";   	 }}